<?php

/**
 * @file
 * Provides a storage for SIF Data Objects.
 */
function sif_data_object_entity_info() {
  $return = array(
    'sif_data_object' => array(
      'label' => t('SIF Data Object'),
      'controller class' => 'SifEntityAPIController',
      'base table' => 'sif_data_object',
      'uri callback' => 'sif_object_uri',
      'entity keys' => array(
        'id' => 'id',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'name',
      ),
      'bundles' => array(),
      'view modes' => array(
        'preview' => array(
          'label' => t('Data Preview'),
        ),
        'xml' => array(
          'label' => t('Raw XML'),
        ),
      ),
    ),
  );

  $objects = module_invoke_all('sif_data_object_types');
  foreach ($objects as $type => $name) {
    $return['sif_data_object']['bundles'][$type] = array(
      'label' => $name,
      'admin' => array(
        'path' => 'admin/sif/objects/%type',
        'real path' => 'admin/sif/objects/' . $type,
        'bundle argument' => 3,
        'access arguments' => array('configure sif'),
      ),
    );
  }
  return $return;
}

/**
 * Implements hook_sif_data_object_types()
 */
function sif_data_object_sif_data_object_types(){
  return array(
    'environment' => t('Environment'),
    'zone' => t('Zone'),
    'queue' => t('Queue'),
    'subscription' => t('Subscription'),
    'alert' => t('Alert'),
    'student' => t('Student'),
  );
}

/**
 * Delete Sif Object
 */
function sif_data_object_delete(&$form_state, $delete_from_server = FALSE){
  $sif_id = $form_state['values']['id'];
  $sif_object = $form_state['sif_object'];
  $success = FALSE;

  // First send a DELETE message to the server
  if ($delete_from_server){
    // POST this environment XML
    $url = variable_get('sif_server', 'http://rest3api.sifassociation.org/api');
    $url .= "/environments/$sif_id";

    $options = array(
      'method' => 'DELETE',
      'headers' => array(
        'Authorization' => $sif_object->authorizationToken,
        'Accept' => 'application/xml',
        'Content-Type' => 'application/xml',
      ),
    );
    $response = drupal_http_request($url, $options);

    if ($response->code != "204"){
      if (property_exists($response, 'data')) {
        form_set_error('delete_from_server', t('POST unsuccessful: !message', array('!message' => strip_tags($response->data))));
      } else {
        form_set_error('delete_from_server', t('POST unsuccessful: code: !code, error: !error', array('!code' => strip_tags($response->code), '!error' => strip_tags($response->error))));
      }
    } else {
      drupal_set_message(t('Successfully deleted from server'));
      $success = TRUE;
    }
  }

  if (!$delete_from_server || ($delete_from_server && $success)) {
    $default = variable_get('sif_default_environment_id');

    // Unset the default environment if we are deleting the current default.
    if ($default == $sif_id) {
      variable_set('sif_default_environment_id', '');
    }

    // Then, delete the local entity
    entity_delete('sif_data_object', $sif_id);

    // Report back success.
    $args = array(
      '@type' => $sif_object->type,
      '%title' => $sif_object->id,
    );
    watchdog('sif', 'SIF @type %title has been deleted from the local database.', $args);
    drupal_set_message(t('SIF @type %title has been deleted from the local database.', $args));
  } else {
    // Report failure to delete from server. Don't delete entity so we can try again.
    drupal_set_message(t('Unable to delete from server. Either uncheck this option, or try again later.'));
  }
}
