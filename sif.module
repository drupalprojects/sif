<?php

/**
 * @file sif.module
 * Main module file for SIF Integration
 */


/**
 * Implements hook_permission().
 */
function sif_permission() {
  $permissions = array(
    'configure sif' => array(
      'title' => t('Configure SIF'),
      'description' => t('Allows users to configure SIF server settings.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

/**
 * Helper for generating our application key.
 */
function sif_get_application_key($token = NULL) {
  if (!$token) {
    if (!$env_id = variable_get('sif_default_environment_id')) {
      $token = variable_get('sif_server_auth_token', 'new');
    }
  }
  if (!$token && $env_id) {
    $entities = entity_load('sif_data_object', array($env_id));
    if (isset($entities[$env_id])){
      $token = $entities[$env_id]->sessionToken;
    } else {
      $token = variable_get('sif_server_auth_token', 'new');
    }
  }
  $secret = variable_get('sif_server_auth_secret', 'guest');
  return "Basic " . base64_encode($token . ':' . $secret);
}

/**
 * Helper to get human readable XML
 */
function clean_xml($xml, $html_encode = FALSE){
  $simpleXml = new SimpleXMLElement($xml);
  $dom = dom_import_simplexml($simpleXml)->ownerDocument;
  $dom->formatOutput = true;
  $output = $dom->saveXML();
  if ($html_encode){
    return '<pre>' . htmlspecialchars($output) . '</pre>';
  } else {
    return $output;
  }
}

/**
 * Generic function to GET a SIF object
 * @param  string $type
 * @param  string $id
 * @param  string $environment
 * @return string
 */
function sif_get($type, $id = NULL, $path = NULL, $environment = NULL) {
  $url = variable_get('sif_server', 'http://rest3api.sifassociation.org/api');
  $url .= "/$type" . 's/';
  if ($id){
    $url .= $id;
  }
  if ($path){
    $url .= '/' . $path;
  }
  if (!$environment){
    $environment = variable_get('sif_default_environment_id');
  }

  if ($environment){
    $entities = entity_load('sif_data_object', array($environment));
    if (isset($entities[$environment])){
      $token = $entities[$environment]->sessionToken;
    }
    $options = array(
      'method' => 'GET',
      'headers' => array(
        'Authorization' => sif_get_application_key($token),
        'Accept' => 'application/xml',
        'Content-Type' => 'application/xml',
      ),
    );
    $response = drupal_http_request($url, $options);
    if ($response->code != "200" && $response->code != "204" ){
      if (property_exists($response, 'data')) {
        drupal_set_message(t('GET unsuccessful: !message', array('!message' => strip_tags($response->data))));
      } else {
        drupal_set_message(t('GET unsuccessful: code: !code, error: !error', array('!code' => strip_tags($response->code), '!error' => strip_tags($response->error))));
      }
      return FALSE;
    } else {
      return $response->data;
    }
  } else {
    drupal_set_message(t('No environment selected. Either explicitly call an environment, or set a default.'));
    return FALSE;
  }
}

/**
 * Generic function to POST a SIF object
 * @param  string $type
 * @param  string $xml
 * @param  string $multi
 * @param  string $environment
 * @return string
 */
function sif_post($type, $xml = NULL, $multi = FALSE, $environment = NULL) {
  $url = variable_get('sif_server', 'http://rest3api.sifassociation.org/api');
  $url .= "/$type" . 's';
  if (!$multi){
    $url .= "/$type";
  }

  if ($type == 'environment'){
    $environment = 'new';
  }

  if (!$environment) {
    $environment = variable_get('sif_default_environment_id');
  }

  if ($environment){
    $token = NULL;
    if ($environment != 'new') {
      $entities = entity_load('sif_data_object', array($environment));
      if (isset($entities[$environment])){
        $token = $entities[$environment]->sessionToken;
      }
    }

    $options = array(
      'method' => 'POST',
      'data' => $xml,
      'headers' => array(
        'Authorization' => sif_get_application_key($token),
        'Accept' => 'application/xml',
        'Content-Type' => 'application/xml',
      ),
    );
    $response = drupal_http_request($url, $options);

    if ($response->code != "201"){
      if (property_exists($response, 'data')) {
        drupal_set_message(t('POST unsuccessful: !message', array('!message' => strip_tags($response->data))));
      } else {
        drupal_set_message(t('POST unsuccessful: code: !code, error: !error', array('!code' => strip_tags($response->code), '!error' => strip_tags($response->error))));
      }
      return FALSE;
    } else {
      return $response->data;
    }
  } else {
    drupal_set_message(t('No environment selected. Either explicitly call an environment, or set a default.'));
    return FALSE;
  }
}


function sif_store($type, $xml) {
  $xml_object = new SimpleXMLElement($xml);
  $id = (string) $xml_object->attributes()->id;
  $values = array(
    'id' => $id,
    'type' => $type,
    'created' => time(),
    'changed' => time(),
    'xml' => $xml,
  );
  $entity = entity_create('sif_data_object', $values);
  if (entity_save('sif_data_object', $entity)){
    drupal_set_message(t('Entity successfully created!'));
    return TRUE;
  } else {
    drupal_set_message(t('Entity not created! Something went wrong.'), 'error');
    return FALSE;
  }
}
