<?php

/**
 * @file sif.module
 * Main module file for SIF Integration
 */


/**
 * Implements hook_permission().
 */
function sif_permission() {
  $permissions = array(
    'configure sif' => array(
      'title' => t('Configure SIF'),
      'description' => t('Allows users to configure SIF server settings.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

/**
 * Helper for generating our application key.
 */
function sif_get_application_key($token = NULL) {
  if (!$token) {
    if (!$env_id = variable_get('sif_default_environment_id')) {
      $token = variable_get('sif_server_auth_token', 'new');
    }
  }
  if (!$token && $env_id) {
    $entities = entity_load('sif_data_object', array($env_id));
    if (isset($entities[$env_id])){
      $token = $entities[$env_id]->sessionToken;
    } else {
      $token = variable_get('sif_server_auth_token', 'new');
    }
  }
  $secret = variable_get('sif_server_auth_secret', 'guest');
  return "Basic " . base64_encode($token . ':' . $secret);
}

/**
 * Helper to get human readable XML
 */
function clean_xml($xml, $html_encode = FALSE){
  $simpleXml = new SimpleXMLElement($xml);
  $dom = dom_import_simplexml($simpleXml)->ownerDocument;
  $dom->formatOutput = true;
  $output = $dom->saveXML();
  if ($html_encode){
    return '<pre>' . htmlspecialchars($output) . '</pre>';
  } else {
    return $output;
  }
}

/**
 * Helper to build the URL for the REST request
 * @return string
 *   The URL for the REST request
 */
function sif_url_build($type, $id = NULL, $zone = NULL, $multi = FALSE, $path = NULL, $page = NULL, $per_page = NULL) {
  $paged = !is_null($page);
  $timeout = variable_get('sif_nav_timeout', 5);
  $nav_info = variable_get('sif_nav_info', FALSE);
  if ($nav_info) {
    if ($nav_info['timestamp'] > strtotime("-$timeout minutes") && $paged) {
      $navigation_id = $nav_info['navigation_id'];
      $navigation_last_page = $nav_info['navigation_last_page'];
      if ($page > $navigation_last_page && $navigation_last_page != -1) {
        return FALSE;
      }
    }
  }

  $url = variable_get('sif_server', 'http://rest3api.sifassociation.org/api');
  $url .= "/$type" . 's';
  if (!$multi) {
    $url .= "/$type";
  }
  if ($id){
    $url .= "/$id";
  }
  if ($path) {
    $url .= "/$path";
  }
  if ($zone) {
    $url .= ";zoneId=$zone";
  }
  if ($paged) {
    $url .= "?page=$page";
    $url .= "&queryIntention=QUERYING_ALL_PAGES";
  }
  if ($per_page) {
    $url .= "&pageSize=$per_page";
  }
  return $url;
}

/**
 * Creates and kicks off the REST request
 * @param  string $type        
 *   GET, POST, PUT or DELETE
 * @param  string $url         
 *   The URL that is being requested
 * @param  string $environment 
 *   The environment being used for the request
 * @param  string $xml         
 *   The XML body of the request
 * @return object              
 *   The request object
 */
function sif_request($type, $url, $environment, $xml = NULL) {
  $token = NULL;
  if ($environment != 'new') {
    $entities = entity_load('sif_data_object', array($environment));
    if (isset($entities[$environment])) {
      $token = $entities[$environment]->sessionToken;
    }
  }
  $authorization_header = variable_get('sif_server_auth_header', 'Authorization');
  $options = array(
    'method' => $type,
    'data' => $xml,
    'headers' => array(
      $authorization_header => sif_get_application_key($token),
      'Accept' => 'application/xml',
      'Content-Type' => 'application/xml',
    ),
  );  
  $response = drupal_http_request($url, $options);
  sif_log($options, $response);
  return $response;
}


/**
 * Generic function to GET a SIF object
 * @param  string $type
 *   Object type we are querying.
 * @param  string $id
 *   The ID of the object to query for.
 * @param  string $path
 *   Additional path (needed for queues).
 * @param  int    $page
 *   The page number of the results to query.
 * @param  int    $per_page
 *   The number of results to show per page.
 * @param  string $zone 
 *   The zone to use. Default used if not set.
 * @param  string $environment
 *   The environment to query within (uses default otherwise).
 * @return mixed          
 *   False on error or no more messages in queue. TRUE or data on success.
 */
function sif_get($type, $id = NULL, $path = NULL, $page = NULL, $per_page = NULL, $zone = NULL, $environment = NULL) {
  if (!$url = sif_url_build($type, $id, $zone, TRUE, $path, $page, $per_page)) {
    drupal_set_message(t('No more pages available.'));
    return FALSE;
  }

  $paged = !is_null($page);
  $two_oh_four_error = FALSE;
  if ($type == 'queue' || $paged) {
    $two_oh_four_error = TRUE;
  }

  if (!$environment) {
    $environment = variable_get('sif_default_environment_id');
  }

  if ($environment) {
    $response = sif_request('GET', $url, $environment);

    if (sif_error_check($response, 'GET', $two_oh_four_error)) {
      return FALSE;
    } else {
      if (property_exists($response, 'data')) {
        if ($response->data) {
          return $response->data;
        }
      }
      if (property_exists($response, 'headers')) {
        if ($response->headers['navigationId']) {
          $nav_info['timestamp'] = time();
          $nav_info['navigation_id'] = $response->headers['navigationId'];
          if ($response->headers['navigationLastPage']) {
            $nav_info['navigation_last_page'] = $response->headers['navigationLastPage'];
          }
          variable_set('sif_nav_info', $nav_info);
        }
      }
      return TRUE;
    }
  } else {
    drupal_set_message(t('No environment selected. Either explicitly call an environment, or set a default.'));
    return FALSE;
  }
}

/**
 * Generic function to POST a SIF object
 * @param  string $type
 *   Object type we are querying.
 * @param  string $xml
 *   The XML for the query.
 * @param  bool   $multi
 *   True if this is a query for multiple objects.
 * @param  string $zone 
 *   The zone to use. Default used if not set.
 * @param  string $environment
 *   The environment to query within (uses default otherwise).
 * @return mixed
 *   False on error or no more messages in queue. TRUE or data on success.
 */
function sif_post($type, $xml = NULL, $multi = FALSE, $zone = NULL, $environment = NULL) {
  $url = sif_url_build($type, NULL, $zone, $multi);

  if ($type == 'environment') {
    $environment = 'new';
  }

  if (!$environment) {
    $environment = variable_get('sif_default_environment_id');
  }

  if ($environment) {
    $response = sif_request('POST', $url, $environment, $xml);

    if (sif_error_check($response, 'POST')) {
      return FALSE;
    } else {
      if (property_exists($response, 'data')) {
        if ($response->data) {
          return $response->data;
        }
      }
      return TRUE;
    }
  } else {
    drupal_set_message(t('No environment selected. Either explicitly call an environment, or set a default.'));
    return FALSE;
  }
}

/**
 * Generic function to PUT a SIF object
 * @param  string $type
 *   Object type we are querying.
 * @param  string $xml
 *   The XML for the query.
 * @param  string $id
 *   The ID of the object to query for.
 * @param  string $zone 
 *   The zone to use. Default used if not set.
 * @param  string $environment
 *   The environment to query within (uses default otherwise).
 * @return mixed
 *   False on error or no more messages in queue. TRUE or data on success.
 */
function sif_put($type, $xml, $id = NULL, $zone = NULL, $environment = NULL) {
  $url = sif_url_build($type, $id, $zone);

  if (!$environment) {
    $environment = variable_get('sif_default_environment_id');
  }

  if ($environment) {
    $response = sif_request('PUT', $url, $environment, $xml);

    if (sif_error_check($response, 'PUT')) {
      return FALSE;
    } else {
      if (property_exists($response, 'data')) {
        if ($response->data) {
          return $response->data;
        }
      }
      return TRUE;
    }
  } else {
    drupal_set_message(t('No environment selected. Either explicitly call an environment, or set a default.'));
    return FALSE;
  }
}

/**
 * Generic function to DELETE a SIF object
 * @param  string $type
 *   Object type we are querying.
 * @param  string $xml
 *   The XML for the query.
 * @param  string $id
 *   The ID of the object to query for.
 * @param  string $zone 
 *   The zone to use. Default used if not set.
 * @param  string $environment
 *   The environment to query within (uses default otherwise).
 * @return mixed
 *   False on error or no more messages in queue. TRUE or data on success.
 */
function sif_delete($type, $xml = NULL, $id = NULL, $zone = NULL, $environment = NULL) {
  $url = sif_url_build($type, $id, $zone);

  if (!$environment) {
    $environment = variable_get('sif_default_environment_id');
  }

  if ($environment) {
    $response = sif_request('DELETE', $url, $environment, $xml);

    if (sif_error_check($response, 'DELETE')){
      return FALSE;
    } else {
      if (property_exists($response, 'data')) {
        if ($response->data) {
          return $response->data;
        }
      }
      return TRUE;
    }
  } else {
    drupal_set_message(t('No environment selected. Either explicitly call an environment, or set a default.'));
    return FALSE;
  }
}

/**
 * Store a SIF data object as an entity
 * @param  string $type
 *   Type of data object
 * @param  string $xml
 *   The XML representing the object
 * @return boolean
 *   True on success, false on failure
 */
function sif_store($type, $xml) {
  $xml_object = new SimpleXMLElement($xml);
  if (!$id = (string) $xml_object->attributes()->id) {
    $id = (string) $xml_object->attributes()->refId;
  }
  $values = array(
    'id' => $id,
    'type' => $type,
    'xml' => $xml,
  );
  $entity = entity_create('sif_data_object', $values);
  if (entity_save('sif_data_object', $entity)){
    drupal_set_message(t('SIF %type object was saved.', array('%type' => $entity->type)));
    return TRUE;
  } else {
    drupal_set_message(t('Entity not created! Something went wrong.'), 'error');
    return FALSE;
  }
}

/**
 * Delete a SIF data object stored as an entity
 * @param  string $type
 *   The type of object
 * @param  string $id
 *   The id of the object
 * @return boolean
 *   True on success, false on failure
 */
function sif_local_delete($type, $id){
  $args = array(
    '@type' => $type,
    '%title' => $id,
  );
  entity_delete('sif_data_object', $id);
  if (!sif_load($id)) {
    // Report back success.
    watchdog('sif', 'SIF @type %title has been deleted from the local database.', $args);
    drupal_set_message(t('SIF @type %title has been deleted from the local database.', $args));
    return TRUE;
  } else {
    watchdog('sif', 'SIF @type %title has NOT been deleted from the local database.', $args, WATCHDOG_ERROR);
    drupal_set_message(t('SIF @type %title has NOT been deleted from the local database.', $args), 'error');
    return FALSE;
  }
}

/**
 * Loads a SIF data object
 * @param  string $id
 *   ID of the object
 * @return mixed
 *   Object on success, false on failure
 */
function sif_load($id) {
  $entities = entity_load('sif_data_object', array($id));
  if (isset($entities[$id])) {
    return $entities[$id];
  } else {
    return FALSE;
  }
}

/**
 * Checks the error code for a correct error message
 * @param  string $response
 *   Response object
 * @param  string $type
 *   Type of request
 * @return mixed
 *   The error associated with that code or false on an OK
 */
function sif_error_check(&$response, $type, $two_oh_four_error = FALSE) {
  $statuses = array(
    '200' => 'OK',
    '201' => 'OK',
    '204' => 'OK',
  );

  if ($two_oh_four_error && $response->code == '204') { // TODO: get rid of this cludginess
    return TRUE;
  } else {
    if (isset($statuses[$response->code])) {
      return FALSE;
    } else {
      $error = $response->error;

      if (property_exists($response, 'data')) {
        drupal_set_message(t("$type unsuccessful: !message", array('!message' => strip_tags($response->data))));
      } else {
        drupal_set_message(t("$type unsuccessful: code: !code, error: !error", array('!code' => strip_tags($response->code), '!error' => $error)));
      }
      
      return $error;
    }
  }
}

/**
 * logs requests to watchdog if this setting is turned on
 * @param  array  $options
 *   The options sent to drupal_http_request
 * @param  object $response
 *   The response object         
 */
function sif_log($options, &$response) {
  $log_setting = variable_get('sif_connection_logging');
  if ($log_setting && module_exists('devel')) {
    $args = array();

    $args['!options'] = dpr($options, TRUE);
    if (property_exists($response, 'data')) {
      if ($response->data) {
        $args['!data'] = clean_xml($response->data, TRUE);
      }
    }
    if (property_exists($response, 'request')) {
      $args['!request'] = dpr($response->request, TRUE);
    }
    if (property_exists($response, 'code')) {
      $args['@code'] = $response->code;
    }
    if (property_exists($response, 'headers')) {
      $args['!headers'] = dpr($response->headers, TRUE);
    }
    if (property_exists($response, 'error')) {
      $args['!error'] = dpr($response->error, TRUE);
    }
    watchdog('sif', 'Request made. Returned code - @code<br/>
      ---- Options ---- !options<br/>
      ---- Request ---- !request<br/>
      ---- Headers ---- !headers<br/>
      ---- Data ---- !data<br/>
      ---- Error ---- !error', $args);
  }
}
